name: Release

on:
  workflow_dispatch:
    inputs:
      draft:
        description: 'Create as draft release'
        type: boolean
        default: true
        required: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Continue with other builds if one fails
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Version
        id: version
        shell: bash
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Install Dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake build-essential
      
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DBUILD_TESTS=ON
      
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release

      # Add explicit path handling for artifacts
      - name: Prepare Artifact
        id: prepare
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp build/Release/tagfs-hello.exe artifacts/
            echo "artifact_path=artifacts/tagfs-hello.exe" >> $GITHUB_OUTPUT
            echo "artifact_name=tagfs-${{ steps.version.outputs.version }}-windows.exe" >> $GITHUB_OUTPUT
          else
            cp build/tagfs-hello artifacts/
            echo "artifact_path=artifacts/tagfs-hello" >> $GITHUB_OUTPUT
            echo "artifact_name=tagfs-${{ steps.version.outputs.version }}-${{ runner.os }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.artifact_name }}
          path: ${{ steps.prepare.outputs.artifact_path }}
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Version
        id: version
        shell: bash
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release_assets

      - name: List Assets
        run: |
          echo "Contents of release_assets:"
          ls -R release_assets

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: ${{ inputs.draft }}
          generate_release_notes: true
          files: release_assets/**/*
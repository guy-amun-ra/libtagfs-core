name: Release

on:
  workflow_dispatch:
    inputs:
      draft:
        description: 'Create as draft release'
        type: boolean
        default: true
        required: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get Version
        id: version
        shell: bash
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Install Dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake build-essential
      
      - name: Configure CMake
        run: cmake -B ${{github.workspace}}/build -DBUILD_TESTS=ON
      
      - name: Build
        run: cmake --build ${{github.workspace}}/build --config Release

      - name: Debug Build Directory
        shell: bash
        run: |
          echo "Build directory contents:"
          ls -R ${{github.workspace}}/build

      - name: Prepare Artifact
        id: prepare
        shell: bash
        run: |
          mkdir -p artifacts
          if [ "$RUNNER_OS" == "Windows" ]; then
            cp "${{github.workspace}}/build/Release/tagfs-hello.exe" artifacts/ || exit 1
            ARTIFACT_NAME="tagfs-${{ steps.version.outputs.version }}-windows.exe"
          elif [ "$RUNNER_OS" == "Linux" ]; then
            cp "${{github.workspace}}/build/tagfs-hello" artifacts/ || exit 1
            ARTIFACT_NAME="tagfs-${{ steps.version.outputs.version }}-linux"
          else
            cp "${{github.workspace}}/build/tagfs-hello" artifacts/ || exit 1
            ARTIFACT_NAME="tagfs-${{ steps.version.outputs.version }}-macos"
          fi
          echo "artifact_name=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.prepare.outputs.artifact_name }}
          path: artifacts/*
          if-no-files-found: error

  create-release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Get Version
        id: version
        shell: bash
        run: |
          VERSION=$(cat VERSION | tr -d '\n')
          echo "version=v${VERSION}" >> $GITHUB_OUTPUT

      - name: Download All Artifacts
        uses: actions/download-artifact@v3
        with:
          path: release_assets

      - name: Prepare Release Assets
        shell: bash
        run: |
          cd release_assets
          for dir in */; do
            if [ -d "$dir" ]; then
              cd "$dir"
              for file in *; do
                if [ -f "$file" ]; then
                  chmod +x "$file"
                  mv "$file" "../${dir%/}-$file"
                fi
              done
              cd ..
              rmdir "$dir"
            fi
          done

      - name: Debug Release Assets
        run: |
          echo "Release assets contents:"
          ls -la release_assets/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Release ${{ steps.version.outputs.version }}
          draft: ${{ inputs.draft }}
          generate_release_notes: true
          files: release_assets/*

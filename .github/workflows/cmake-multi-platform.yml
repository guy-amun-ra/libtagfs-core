name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  checks: write
  contents: read
  pull-requests: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_TESTS=ON
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }} --output-on-failure

    - name: Package Artifacts
      shell: bash
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp -v ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/tagfs-hello.exe artifacts/ || true
          cp -v ${{ steps.strings.outputs.build-output-dir }}/${{ matrix.build_type }}/tests/unit/tagfs_tests.exe artifacts/ || true
        else
          cp -v ${{ steps.strings.outputs.build-output-dir }}/tagfs-hello artifacts/ || true
          cp -v ${{ steps.strings.outputs.build-output-dir }}/tests/unit/tagfs_tests artifacts/ || true
        fi

    - name: Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: tagfs-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: |
          artifacts/*
          ${{ steps.strings.outputs.build-output-dir }}/Testing/**/*.xml

    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          ${{ steps.strings.outputs.build-output-dir }}/Testing/**/*.xml

    - name: Create Package
      if: matrix.build_type == 'Release'
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --target package

    - name: Upload Package
      if: matrix.build_type == 'Release'
      uses: actions/upload-artifact@v3
      with:
        name: tagfs-package-${{ matrix.os }}-${{ matrix.c_compiler }}
        path: ${{ steps.strings.outputs.build-output-dir }}/*.zip